//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sarang
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IGITEntities : DbContext
    {
        public IGITEntities()
            : base("name=IGITEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Bio> Bios { get; set; }
        public virtual DbSet<tblStudent> tblStudents { get; set; }
        public virtual DbSet<BDskill> BDskills { get; set; }
        public virtual DbSet<TAddress> TAddresses { get; set; }
        public virtual DbSet<TOrder> TOrders { get; set; }
        public virtual DbSet<TUser> TUsers { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Angular> Angulars { get; set; }
        public virtual DbSet<Chart_tbl> Chart_tbl { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
    
        public virtual int SPInsert(string firstName, string lastName, string emailID, Nullable<System.DateTime> dateOfBirth, string password)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsert", firstNameParameter, lastNameParameter, emailIDParameter, dateOfBirthParameter, passwordParameter);
        }
    
        public virtual int SPUpdate(Nullable<long> iD, string firstName, string lastName, string emailID, Nullable<System.DateTime> dateOfBirth, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUpdate", iDParameter, firstNameParameter, lastNameParameter, emailIDParameter, dateOfBirthParameter, passwordParameter);
        }
    
        public virtual int BioInsert(string address, Nullable<long> phoneNumber, string certificate)
        {
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            var certificateParameter = certificate != null ?
                new ObjectParameter("Certificate", certificate) :
                new ObjectParameter("Certificate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BioInsert", addressParameter, phoneNumberParameter, certificateParameter);
        }
    
        public virtual ObjectResult<AllData_Result> AllData(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllData_Result>("AllData", iDParameter);
        }
    
        public virtual ObjectResult<SP_Search_Result> SP_Search(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Search_Result>("SP_Search", searchParameter);
        }
    
        public virtual ObjectResult<StringAll_Result> StringAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StringAll_Result>("StringAll");
        }
    
        public virtual int SPchangePass(Nullable<long> iD, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPchangePass", iDParameter, passwordParameter);
        }
    
        public virtual int AddressUpdate(Nullable<long> iD, string currentAddress, string permanentAddress)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var currentAddressParameter = currentAddress != null ?
                new ObjectParameter("CurrentAddress", currentAddress) :
                new ObjectParameter("CurrentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddressUpdate", iDParameter, currentAddressParameter, permanentAddressParameter);
        }
    
        public virtual ObjectResult<datemonthyear_Result> datemonthyear(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<datemonthyear_Result>("datemonthyear", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ProfileCompleted(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ProfileCompleted", iDParameter);
        }
    
        public virtual int IsActive0(string emailID)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsActive0", emailIDParameter);
        }
    
        public virtual int IsActive1(string emailID)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsActive1", emailIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsertUser(string name, string email, Nullable<long> phoneNumber)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsertUser", nameParameter, emailParameter, phoneNumberParameter);
        }
    
        public virtual int Messageshow(string emailID, string message)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messageshow", emailIDParameter, messageParameter);
        }
    
        public virtual int Angular_Delete(string emailID)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Angular_Delete", emailIDParameter);
        }
    
        public virtual int Angular_Insert(string name, Nullable<long> phone, string department, Nullable<double> salary, string emailID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(long));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(double));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Angular_Insert", nameParameter, phoneParameter, departmentParameter, salaryParameter, emailIDParameter);
        }
    
        public virtual int Angular_Update(Nullable<int> iD, string name, Nullable<long> phone, string department, Nullable<double> salary, string emailID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(long));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(double));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Angular_Update", iDParameter, nameParameter, phoneParameter, departmentParameter, salaryParameter, emailIDParameter);
        }
    
        public virtual ObjectResult<FeedbackMessage_Result> FeedbackMessage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FeedbackMessage_Result>("FeedbackMessage");
        }
    
        public virtual ObjectResult<Student_data_Result> Student_data()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student_data_Result>("Student_data");
        }
    }
}
